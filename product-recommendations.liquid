{%- comment -%}
Below is a fallback structure that displays products for standard
Shopify recommendations list. If our JavaScript code does not return
any results, below recommendations are being displayed.
{%- endcomment -%}

<div class="content-area">
  <div class="product-recommendations" data-max-results="{{ section.settings.related_products_amount }}">
    <h2 class="section-title">{{ section.settings.related_products_title }}</h2>
    <ul class="product-list">
      {%- if recommendations.products_count > 0 -%}
        {%- for product in recommendations.products -%}
          <li class="product">
            <a href="{{ product.url }}">
              <img class="product__img" src="{{ product.featured_image | img_url: 'x600', crop: 'center' }}" alt="{{ product.featured_image.alt }}" />
              <p class="product__title">{{ product.title }}</p>
              <p class="product__price">{{ product.price | money }}</p>
            </a>
          </li>
        {%- endfor -%}
      {%- endif -%}
    </ul>
  </div>
</div>


{%- comment -%}
We need to retrieve all excluded words from theme settings to be able 
to reuse them in our JavaScript code later on. This section should be 
hidden by default, customers do not need to see it.
{%- endcomment -%}

<div class="excluded-words-holder hidden">
  {{ section.settings.related_products_excluded_words }}
</div>

{% schema %}
  {
    "name": "Related Products",
    "settings": [
      {
        "type": "text",
        "id": "related_products_title",
        "label": "Section title",
        "default": "You may also like"
      },
      {
        "type": "textarea",
        "id": "related_products_excluded_words",
        "label": "Excluded words (separated by comma)"
      },
      {
        "type": "range",
        "id": "related_products_amount",
        "min": 2,
        "max": 6,
        "step": 1,
        "label": "Number of products to show",
        "default": 4
      }
    ]
  }
{% endschema %}


{% stylesheet %}
  .product-recommendations ul {
    text-align: left;
    margin-left: -30px;
  }

  .product-recommendations .product {
    width: calc( 100 / {{ maxResults }})%;
  }

  .product-recommendations .product a {
    display: block;
    text-align: center;
    color: #000000;
  }
      
  .product-recommendations .product img {
    max-width: 100%;
    width: 100%;
    height: auto;
  }

  .product-recommendations .product img:hover {
    opacity: 0.8; 
  }
      
  @media(max-width: 768px) {
    .product-recommendations .product {
      width: 100% !important;
    }
  }
{% endstylesheet %}

{% javascript %}
  var excludedWords = [];
  var excludedWordsHolder = document.querySelector('.excluded-words-holder');
  var excludedWordsHolderArray = excludedWordsHolder.innerHTML.split(',');

  // Iterate over entire exluded words holder
  excludedWordsHolderArray.forEach(function(word) {
    // Save each word to new array, remove any spaces
    excludedWords.push(word.replace(/\s/g, ''));
  })

  var productTitle = document.querySelector('.product-details h1.title').innerHTML;

  // Stop if product has no title on the page. This is to avoid
  // potential problems with theme structure. Make sure to update above with
  // correct classes assigned to product title in your theme.
  if (productTitle === null) {
    return;
  }

  // Remove excluded words from search query
  const getRidOfExcludedWords = (word) => {
    let wordsCollection = [];	
    if (!excludedWords.includes(word)) {
      return word;
    }
  };

  var productTitleWords = productTitle.split(' ');
  var searchWords = productTitleWords.filter(getRidOfExcludedWords);

  // First word in array of all search query words
  var searchWordsNumber = 0;
  var resultsAddedToSection = 0;

  var loadProductRecommendationsIntoSection = (searchWordsNumber) => {
    let productRecommendationsSection = document.querySelector(".product-recommendations");
    let maxResults = document.querySelector('.product-recommendations').dataset.maxResults;

    // Stop if section is not present on the page
    if (productRecommendationsSection === null) {
      return;
    }

    let productRecommendationsList = productRecommendationsSection.querySelector('.product-list');
    let searchURL = '/search?q=';
    let requestUrl = searchURL + searchWords[searchWordsNumber];
    let responseResultsNumber = 0;
    let responseProducts = [];
    let request = new XMLHttpRequest();

    request.open('GET', requestUrl);
    request.onload = function() {
      if (request.status >= 200 && request.status < 300) {
        let container = document.createElement('div');

        // Assignment below assumes that products on search page are inside
        // the .results-label classed container
        let responseResults = request.response.split('class="results-label">')[1];
        responseResultsNumber = responseResults.charAt(0) + responseResults.charAt(1);

        // If number of products returned from query is more than maximum
        // amount we need, do not bother about the rest
        if (parseInt(responseResultsNumber) > maxResults) {
          responseResultsNumber = maxResults;
        }

        let productMaxWidth = 100 / maxResults;
                              
        for (let i=1; i<=parseInt(responseResultsNumber); i++) {
          let responseProduct = request.response.split('data-result-number="' + i)[1];
          responseProduct = responseProduct.split('</article>')[0];
          responseProduct = htmlToElements(responseProduct.substring(2));

          // Code below assumes certain HTML structure of response. It may vary from theme to theme,
          // best bet would be to console.log responseProduct here.
          relatedProduct = '';
          relatedProduct += '<li class="product" style="width:' + productMaxWidth + '%">'; 
          relatedProduct += '<a href="' + responseProduct[2].baseURI + '">';
          relatedProduct += '<img class="product__img" src="' + htmlToElement(responseProduct[1].innerHTML).src + '" alt="" />';
          relatedProduct += '<p class="product__title">' + responseProduct[3].childNodes[3].innerText + '</p>';
          relatedProduct += '<p class="product__price">' + responseProduct[3].childNodes[5].innerText + '</p>';
          relatedProduct += '</a>';
          relatedProduct += '</li>';

          responseProducts.push(relatedProduct);
        }

        responseProducts = shuffleResults(responseProducts);
        resultsAddedToSection = responseProducts.length;

        container.innerHTML = responseProducts.join('');
        productRecommendationsList.innerHTML = container.innerHTML;
      }

      // Run function recursively when number of returned products
      // is less than maximum amount for section, when section contains
      // less products than maximum altogether and we have search words available
      if (parseInt(responseResultsNumber) < maxResults && resultsAddedToSection <= maxResults && ++searchWordsNumber < searchWords.length) {
        loadProductRecommendationsIntoSection(searchWordsNumber);
      }
    };
    request.send();
  };

  // Converts HTML string to Nodes
  // via: https://stackoverflow.com/a/35385518/4878262                             
  const htmlToElements = (html) => {
    var template = document.createElement('template');
    template.innerHTML = html;
    return template.content.childNodes;
  }

  // Converts HTML string to Nodes
  // via: https://stackoverflow.com/a/35385518/4878262
  const htmlToElement = (html) => {
    let template = document.createElement('template');
    html = html.trim();
    template.innerHTML = html;
    return template.content.firstChild;
  }

  // This will shuffle results in a response
  const shuffleResults = (resultsArray) => {
    let j, x, i;
    for (i = resultsArray.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = resultsArray[i];
        resultsArray[i] = resultsArray[j];
        resultsArray[j] = x;
    }
    return resultsArray;
  }

  // Make sure to rerun function on theme customizer update
  document.addEventListener("shopify:section:load", function(event) {
    if (event.detail.sectionId === "product-recommendations") {
      loadProductRecommendationsIntoSection(searchWordsNumber);
    }
  });

  loadProductRecommendationsIntoSection(searchWordsNumber);
{% endjavascript %}
